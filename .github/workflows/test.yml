name: Test

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with black
      run: |
        black --check src/appstore_connect tests
    
    - name: Lint with flake8
      run: |
        flake8 src/appstore_connect tests --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Type check with mypy
      run: |
        mypy src/appstore_connect
    
    - name: Test with pytest
      run: |
        pytest --cov=appstore_connect --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Extract release notes
      id: release_notes
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        # Extract the section for this version from CHANGELOG.md
        awk -v ver="## [$VERSION]" '
          $0 ~ ver {p=1; next}
          /^## \[/ && p {exit}
          p {print}
        ' CHANGELOG.md > release_notes.txt
        
        # Read the content into a GitHub output
        {
          echo 'NOTES<<EOF'
          cat release_notes.txt
          echo 'EOF'
        } >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.NOTES }}
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false